---

- operator_sdk.util.k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: "{{ deployment_type | capitalize }}-Operator-Finished-Execution"
        message: "{{ deployment_type | capitalize }} operator tasks running"
        reason: OperatorRunning
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: Set node affinity
  set_fact:
    _node_affinity: "{{ raw_spec['affinity']['node_affinity'] | default({}) }}"
  when: affinity is defined and affinity.node_affinity is defined

- name: Obtain custom resource information
  set_fact:
    custom_resource: "{{ hostvars[inventory_hostname][custom_resource_key] }}"
    custom_resource_status: "{{ hostvars[inventory_hostname][custom_resource_key]['status'] | default({}) }}"

- name: Set database as managed
  set_fact:
    managed_database: "{{ pg_config['resources'][0]['data']['type'] | default('') | b64decode == 'managed' }}"

- name: Set postgres label if not defined by user
  set_fact:
    postgres_label_selector: "app.kubernetes.io/instance=postgres-{{ ansible_operator_meta.name }}"
  when: postgres_label_selector is not defined

# It is possible that N-2 postgres pods may still be present in the namespace from previous upgrades.
# So we have to take that into account and preferentially set the most recent one.
- name: Get the old postgres pod (N-1)
  kubernetes.core.k8s_info:
    kind: Pod
    api_version: v1
    namespace: "{{ ansible_operator_meta.namespace }}"
    label_selectors:
      - "{{ postgres_label_selector }}"
    field_selectors:
      - status.phase=Running
  register: _running_pods

- block:
    - name: Filter pods by name
      set_fact:
        filtered_old_postgres_pods: "{{ _running_pods.resources |
          selectattr('metadata.name', 'match', ansible_operator_meta.name + '-postgres.*-0') |
          rejectattr('metadata.name', 'search', '-' + supported_pg_version | string + '-0') |
          list }}"

    # Sort pods by name in reverse order (most recent PG version first) and set
    - name: Set info for previous postgres pod
      set_fact:
        sorted_old_postgres_pods: "{{ filtered_old_postgres_pods |
          sort(attribute='metadata.name') |
          reverse | list }}"
      when: filtered_old_postgres_pods | length

    - name: Set info for previous postgres pod
      set_fact:
        old_postgres_pod: "{{ sorted_old_postgres_pods | first }}"
      when: filtered_old_postgres_pods | length
  when: _running_pods.resources | length

- block:
    - operator_sdk.util.k8s_status:
        api_version: "{{ api_version }}"
        kind: "{{ kind }}"
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        conditions:
          - type: Database-Ready
            message: Creating database StatefulSet resource
            reason: CreatingStatefulSet
            status: "False"
            lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

    - name: Create Database if no database is specified
      k8s:
        apply: true
        definition: "{{ lookup('template', 'postgres.yaml.j2') }}"
  when: managed_database

- name: Look up details for this deployment
  kubernetes.core.k8s_info:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: this_galaxy

# If this deployment has been upgraded before or if upgrade has already been started, set this var
- name: Set previous PG version var
  set_fact:
    _previous_upgraded_pg_version: "{{ this_galaxy['resources'][0]['status']['upgradedPostgresVersion'] | default(false) }}"
  when:
    - "'upgradedPostgresVersion' in this_galaxy['resources'][0]['status']"

- name: Check if postgres pod is running and version 12
  block:
    - name: Set path to PG_VERSION file for given container image
      set_fact:
        path_to_pg_version: '{{ _postgres_data_path }}/PG_VERSION'
        path_to_pg_version_old: '/var/lib/postgresql/data/pgdata/PG_VERSION'

    - name: Get old PostgreSQL version (Checking old pg data path too)
      kubernetes.core.k8s_exec:
        namespace: "{{ ansible_operator_meta.namespace }}"
        pod: "{{ old_postgres_pod['metadata']['name'] }}"
        command: |
          bash -c '
          if [ -f {{ path_to_pg_version }} ]; then
            cat {{ path_to_pg_version }}
          elif [ -f {{ path_to_pg_version_old }} ]; then
            cat {{ path_to_pg_version_old }}
          else
            echo "Neither file exists"
          fi
          '
      register: _old_pg_version

    - debug:
        msg: "--- Upgrading from {{ old_postgres_pod['metadata']['name'] | default('NONE')}} Pod ---"

    - name: Upgrade data dir from old Postgres to {{ supported_pg_version }} if applicable
      include_tasks: upgrade_postgres.yml
      when:
        - (_old_pg_version.stdout | default(0) | int ) < supported_pg_version
  when:
    - managed_database
    - (_previous_upgraded_pg_version | default(false)) | ternary(_previous_upgraded_pg_version | int < supported_pg_version, true)
    - old_postgres_pod | length  # If empty, then old pg pod has been removed and we can assume the upgrade is complete

- name: Migrate data from old Openshift instance
  import_tasks: migrate_data.yml
  when:
    - old_pg_config['resources'] is defined
    - old_pg_config['resources'] | length
    - not database_status_present

- name: Check PostgreSQL status
  kubernetes.core.k8s_info:
    api_version: v1
    kind: StatefulSet
    namespace: "{{ ansible_operator_meta.namespace }}"
    name: "{{ ansible_operator_meta.name }}-postgres-{{ supported_pg_version }}"
  register: _pg_sts_status
  until: _pg_sts_status['resources'][0]['status']['availableReplicas'] == _pg_sts_status['resources'][0]['status']['replicas']
  retries: 20
  delay: 10

- operator_sdk.util.k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: Database-Ready
        message: All Postgres tasks ran successfully
        reason: DatabaseTasksFinished
        status: "True"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

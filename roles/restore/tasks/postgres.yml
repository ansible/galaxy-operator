---
- name: Check for specified PostgreSQL configuration
  k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ db_secret_name }}'
  register: _custom_pg_config_resources
  no_log: "{{ no_log }}"
  when:
    - db_secret_name is defined
    - db_secret_name | length

- name: Check for default PostgreSQL configuration
  k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ deployment_name }}-postgres-configuration'
  register: _default_pg_config_resources
  no_log: "{{ no_log }}"

- name: Set PostgreSQL configuration
  set_fact:
    pg_config: '{{ _custom_pg_config_resources["resources"] | default([]) | length | ternary(_custom_pg_config_resources, _default_pg_config_resources) }}'
  no_log: "{{ no_log }}"

- name: Store Database Configuration
  set_fact:
    postgres_user: "{{ pg_config['resources'][0]['data']['username'] | b64decode }}"
    postgres_pass: "{{ pg_config['resources'][0]['data']['password'] | b64decode }}"
    postgres_database: "{{ pg_config['resources'][0]['data']['database'] | b64decode }}"
    postgres_port: "{{ pg_config['resources'][0]['data']['port'] | b64decode }}"
    postgres_host: "{{ pg_config['resources'][0]['data']['host'] | b64decode }}"
    postgres_sslmode: "{{ pg_config['resources'][0]['data']['sslmode'] | default('prefer'|b64encode) | b64decode }}"
    postgres_type: "{{ pg_config['resources'][0]['data']['type'] | default('unmanaged'|b64encode) | b64decode }}"
  no_log: "{{ no_log }}"

- name: Default label selector to custom resource generated postgres
  set_fact:
    postgres_label_selector: "app.kubernetes.io/instance=postgres-{{ deployment_name }}"
  when: postgres_label_selector is not defined

- block:
    - name: Get the postgres pod information
      k8s_info:
        kind: Pod
        namespace: '{{ ansible_operator_meta.namespace }}'
        label_selectors:
          - "{{ postgres_label_selector }}"
          - "app.kubernetes.io/version={{ postgres_version }}"
      register: postgres_pod
      until:
        - "postgres_pod['resources'] | length"
        - "postgres_pod['resources'][0]['status']['phase'] == 'Running'"
      delay: 5
      retries: 60

    - name: Set the resource pod name as a variable.
      set_fact:
        postgres_pod_name: "{{ postgres_pod['resources'][0]['metadata']['name'] }}"
  when: postgres_type == 'managed'

- block:
    - name: Set the resource pod name as a variable.
      set_fact:
        storage_claim: "{{ deployment_name }}-file-storage"

    - name: Wait for PVC to be created if file-storage is used
      k8s_info:
        api_version: v1
        kind: PersistentVolumeClaim
        namespace: "{{ ansible_operator_meta.namespace }}"
        name: "{{ storage_claim }}"
      register: pvc_status
      until: pvc_status.resources | length > 0
      retries: 60
      delay: 10
      ignore_errors: yes

    - name: Fail with custom message if PVC not found
      fail:
        msg: "PVC '{{ storage_claim }}' not found in namespace '{{ ansible_operator_meta.namespace }}' after 10 minutes."
      when: pvc_status.resources | length == 0
  when: storage_type | lower == 'file'

- include: scale_down.yml deploy_name={{ item }}
  with_items:
    - "{{ deployment_name}}-api"
    - "{{ deployment_name }}-content"
    - "{{ deployment_name }}-worker"
    - "{{ deployment_name }}-web"

- name: Set full resolvable host name for postgres pod
  set_fact:
    resolvable_db_host: '{{ (postgres_type == "managed") | ternary(postgres_host + "." + ansible_operator_meta.namespace + ".svc." + cluster_name, postgres_host) }}'  # yamllint disable-line rule:line-length
  no_log: "{{ no_log }}"

- name: Set pg_restore command
  set_fact:
    pg_restore: >-
      pg_restore --clean --if-exists
      -h {{ resolvable_db_host }}
      -U {{ postgres_user }}
      -d {{ postgres_database }}
      -p {{ postgres_port }}
  no_log: "{{ no_log }}"

- name: Force drop and create database if force_drop_db is true
  block:
    - name: Set drop db command
      set_fact:
        pg_drop_db: >-
          echo 'DROP DATABASE {{ postgres_database }} WITH (FORCE);' | PGPASSWORD='{{ postgres_pass }}' psql
          -U {{ postgres_user }}
          -h {{ resolvable_db_host }}
          -d postgres
          -p {{ postgres_port }} ;
      no_log: "{{ no_log }}"

    - name: Set create db command
      set_fact:
        pg_create_db: >-
          echo 'CREATE DATABASE {{ postgres_database }} WITH OWNER = {{ postgres_user }};' | PGPASSWORD='{{ postgres_pass }}' psql
          -U {{ postgres_user }}
          -h {{ resolvable_db_host }}
          -d postgres
          -p {{ postgres_port }} ;
      no_log: "{{ no_log }}"

    - name: Set complete pg restore command
      set_fact:
        pg_drop_create: >-
          {{ pg_drop_db }}
          {{ pg_create_db }}
  when: force_drop_db

- name: Restore database dump to the new postgresql container
  k8s_exec:
    namespace: "{{ backup_pvc_namespace }}"
    pod: "{{ ansible_operator_meta.name }}-backup-manager"
    command: |
      bash -c "
      function end_keepalive {
        rc=$?
        rm -f \"$1\"
        kill $(cat /proc/$2/task/$2/children 2>/dev/null) 2>/dev/null || true
        wait $2 || true
        exit $rc
      }
      keepalive_file=\"$(mktemp)\"
      while [[ -f \"$keepalive_file\" ]]; do
        echo 'Migrating data from old database...'
        sleep 60
      done &
      keepalive_pid=$!
      trap 'end_keepalive \"$keepalive_file\" \"$keepalive_pid\"' EXIT SIGINT SIGTERM
      echo keepalive_pid: $keepalive_pid
      set -e -o pipefail
      {{ pg_drop_create }}
      cat {{ backup_dir }}/pulp.db | PGPASSWORD='{{ postgres_pass }}' {{ pg_restore }}
      PG_RC=$?
      set +e +o pipefail
      exit $PG_RC
      "
  register: data_migration
  no_log: "{{ no_log }}"

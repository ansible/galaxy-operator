---

- name: Get secret definition from pvc
  k8s_exec:
    namespace: "{{ backup_pvc_namespace  }}"
    pod: "{{ ansible_operator_meta.name }}-backup-manager"
    command: >-
      bash -c "cat '{{ backup_dir }}/secrets.yaml'"
  register: secrets
  no_log: "{{ no_log }}"

- name: Create temp vars file
  tempfile:
    prefix: secret_vars-
  register: secret_vars

- name: Write vars to file locally
  copy:
    dest: "{{ secret_vars.path }}"
    content: "{{ secrets.stdout }}"
    mode: 0640
  no_log: "{{ no_log }}"

- name: Include secret vars from backup
  include_vars: "{{ secret_vars.path }}"
  no_log: "{{ no_log }}"

- name: Apply admin password secret
  k8s:
    state: present
    definition: "{{ lookup('template', 'admin-password.secret.yaml.j2') }}"
  no_log: "{{ no_log }}"

- name: If deployment is managed, set the database_host in the pg config secret
  set_fact:
    database_host: "{{ deployment_name }}-postgres-{{ supported_pg_version }}"
    db_secret_name: "{{ deployment_name }}-postgres-configuration"
  no_log: "{{ no_log }}"
  when:
    - database_type is defined
    - database_type == 'managed'

- name: Apply database configuration secret
  k8s:
    state: present
    definition: "{{ lookup('template', 'postgres.secret.yaml.j2') }}"
  no_log: "{{ no_log }}"
  when:
    - db_secret_name is defined
    - db_secret_name | length
    - database_password is defined

- name: ls backup directory on PVC
  k8s_exec:
    namespace: "{{ backup_pvc_namespace }}"
    pod: "{{ ansible_operator_meta.name }}-backup-manager"
    command: >-
      bash -c "ls {{ backup_dir }}/"
  register: ls_backup_dir

- name: Set name of objectstorage file name
  set_fact:
    objstorage_file: 'objectstorage_secret.yaml'

- name: Create object storage secret
  block:
    - name: Get secret definition from pvc
      k8s_exec:
        namespace: "{{ backup_pvc_namespace }}"
        pod: "{{ ansible_operator_meta.name }}-backup-manager"
        command: >-
          bash -c "cat '{{ backup_dir }}/{{ objstorage_file }}'"
      register: objectstorage_secret
      no_log: "{{ no_log }}"

    - name: Create temp vars file
      tempfile:
        prefix: secret_vars-
      register: secret_vars_obj

    - name: Write vars to file locally
      copy:
        dest: "{{ secret_vars_obj.path }}"
        content: "{{ objectstorage_secret.stdout }}"
        mode: 0640
      no_log: "{{ no_log }}"

    - name: Include secret vars from backup
      include_vars: "{{ secret_vars_obj.path }}"
      no_log: "{{ no_log }}"

    - name: Apply s3 secret
      k8s:
        state: present
        definition: "{{ lookup('template', 'templates/s3_secret.yaml.j2') }}"
      no_log: "{{ no_log }}"
      when:
        - storage_type | lower == 's3'
        - storage_secret is defined
        - storage_secret | length

    - name: Apply azure secret
      k8s:
        state: present
        definition: "{{ lookup('template', 'templates/azure_secret.yaml.j2') }}"
      no_log: "{{ no_log }}"
      when:
        - storage_type | lower == 'azure'
        - storage_secret is defined
        - storage_secret | length
  when:
    - objstorage_file in ls_backup_dir.stdout

- name: Set name of galaxy signing file name
  set_fact:
    signing_file: 'signing_secret.yaml'

- name: Create galaxy signing secret
  block:
    - name: Get secret definition from pvc
      k8s_exec:
        namespace: "{{ backup_pvc_namespace }}"
        pod: "{{ ansible_operator_meta.name }}-backup-manager"
        command: >-
          bash -c "cat '{{ backup_dir }}/{{ signing_file }}'"
      register: sign_secret
      no_log: "{{ no_log }}"

    - name: Create temp vars file
      tempfile:
        prefix: secret_vars-
      register: secret_vars_sign

    - name: Write vars to file locally
      copy:
        dest: "{{ secret_vars_sign.path }}"
        content: "{{ sign_secret.stdout }}"
        mode: 0640
      no_log: "{{ no_log }}"

    - name: Include secret vars from backup
      include_vars: "{{ secret_vars_sign.path }}"
      no_log: "{{ no_log }}"

    - name: Apply galaxy signing secret
      k8s:
        state: present
        definition: "{{ lookup('template', 'templates/signing_secret.yaml.j2') }}"
      no_log: "{{ no_log }}"
      when:
        - signing_secret is defined
        - signing_secret | length
  when:
    - signing_file in ls_backup_dir.stdout

- name: Set name of container token file name
  set_fact:
    container_token_file: 'container_token_secret.yaml'

- name: Create container token secret
  block:
    - name: Get secret definition from pvc
      k8s_exec:
        namespace: "{{ backup_pvc_namespace }}"
        pod: "{{ ansible_operator_meta.name }}-backup-manager"
        command: >-
          bash -c "cat '{{ backup_dir }}/{{ container_token_file }}'"
      register: cont_token_secret
      no_log: "{{ no_log }}"

    - name: Create temp vars file
      tempfile:
        prefix: secret_vars-
      register: secret_vars_cont

    - name: Write vars to file locally
      copy:
        dest: "{{ secret_vars_cont.path }}"
        content: "{{ cont_token_secret.stdout }}"
        mode: 0640
      no_log: "{{ no_log }}"

    - name: Include secret vars from backup
      include_vars: "{{ secret_vars_cont.path }}"
      no_log: "{{ no_log }}"

    - name: Apply container token secret
      k8s:
        state: present
        definition: "{{ lookup('template', 'templates/container_token_secret.yaml.j2') }}"
      no_log: "{{ no_log }}"
      when:
        - container_token_secret is defined
        - container_token_secret | length
  when:
    - container_token_file in ls_backup_dir.stdout

- name: Set name of DB fields encryption file name
  set_fact:
    db_fields_encryption_file: 'db_fields_encryption_secret.yaml'

- name: Create DB fields encryption token secret
  block:
    - name: Get secret definition from pvc
      k8s_exec:
        namespace: "{{ backup_pvc_namespace }}"
        pod: "{{ ansible_operator_meta.name }}-backup-manager"
        command: >-
          bash -c "cat '{{ backup_dir }}/{{ db_fields_encryption_file }}'"
      register: db_fields_encryption_content
      no_log: "{{ no_log }}"

    - name: Create temp vars file
      tempfile:
        prefix: secret_vars-
      register: secret_vars_db

    - name: Write vars to file locally
      copy:
        dest: "{{ secret_vars_db.path }}"
        content: "{{ db_fields_encryption_content.stdout }}"
        mode: 0640
      no_log: "{{ no_log }}"

    - name: Include secret vars from backup
      include_vars: "{{ secret_vars_db.path }}"
      no_log: "{{ no_log }}"

    - name: Apply DB fields encryption secret
      k8s:
        state: present
        definition: "{{ lookup('template', 'templates/db_fields_encryption_secret.yaml.j2') }}"
      no_log: "{{ no_log }}"
      when:
        - db_fields_encryption_secret is defined
        - db_fields_encryption_secret | length
  when:
    - db_fields_encryption_file in ls_backup_dir.stdout

- name: Set name of sso configuration file name
  set_fact:
    sso_file: 'sso_secret.yaml'

- name: Create sso secret
  block:
    - name: Get secret definition from pvc
      k8s_exec:
        namespace: "{{ backup_pvc_namespace }}"
        pod: "{{ ansible_operator_meta.name }}-backup-manager"
        command: >-
          bash -c "cat '{{ backup_dir }}/{{ sso_file }}'"
      register: sso_secret_content
      no_log: "{{ no_log }}"

    - name: Create temp vars file
      tempfile:
        prefix: secret_vars-
      register: secret_vars_sso

    - name: Write vars to file locally
      copy:
        dest: "{{ secret_vars_sso.path }}"
        content: "{{ sso_secret_content.stdout }}"
        mode: 0640
      no_log: "{{ no_log }}"

    - name: Include secret vars from backup
      include_vars: "{{ secret_vars_sso.path }}"
      no_log: "{{ no_log }}"

    - name: Apply container token secret
      k8s:
        state: present
        definition: "{{ lookup('template', 'templates/sso_secret.yaml.j2') }}"
      no_log: "{{ no_log }}"
      when:
        - sso_secret is defined
        - sso_secret | length
  when:
    - sso_file in ls_backup_dir.stdout

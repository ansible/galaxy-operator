---

- name: Getting raw pulp_settings
  set_fact:
    raw_pulp_settings: "{{ raw_spec['pulp_settings'] | default({}) }}"
  no_log: "{{ no_log }}"
  when: pulp_settings is defined

- name: Combining pulp_settings
  set_fact:
    pulp_combined_settings: "{{ default_settings|combine(raw_pulp_settings, recursive=True) if pulp_settings is defined and pulp_settings is not none else default_settings }}"
  no_log: "{{ no_log }}"

# Workaround being unable to do the following, for the subsequent task:
# when: (pulp_settings is not defined) or
#   (pulp_settings.content_origin is not defined)
# (short-circuit evaluation only works for multiple separate when statements)
# https://github.com/ansible/ansible/issues/50554
- name: Setting CONTENT_ORIGIN
  set_fact:
    content_origin: pulp_settings.content_origin
  when:
    - pulp_settings.content_origin is defined

- name: Getting raw pulp_settings
  set_fact:
    raw_pulp_settings: "{{ raw_spec['pulp_settings'] | default({}) }}"
  no_log: "{{ no_log }}"
  when: pulp_settings is defined

- name: Set default token authentication secret name if not set by user
  set_fact:
    container_token_secret: '{{ ansible_operator_meta.name }}-container-auth'
    cacheable: yes
  when: container_token_secret is not defined

- include_tasks:
    file: get_node_ip.yml
  when: content_origin is not defined

- name: Set token_server and other container default settings
  set_fact:
    token_server_dict: "{ 'token_server': '{{ content_origin }}/token/', 'token_auth_disabled': 'False', 'token_signature_algorithm': 'ES256','public_key_path': '/etc/pulp/keys/container_auth_public_key.pem', 'private_key_path': '/etc/pulp/keys/container_auth_private_key.pem' }"

- name: merge token_server with settings
  set_fact:
    default_settings: "{{ default_settings|combine(token_server_dict) }}"
  no_log: "{{ no_log }}"

- name: Set default CSRF_TRUSTED_ORIGINS to be used if not set by user
  set_fact:
    _trusted_origin_1: "http://{{ default_settings.content_origin.split('://')[1] }}"
    _trusted_origin_2: "https://{{ default_settings.content_origin.split('://')[1] }}"
  when:
    - default_settings is defined
    - default_settings.content_origin is defined

- name: Set CSRF_TRUSTED_ORIGINS list based on content_origin
  set_fact:
    _csrf_trusted_origins: "{{ csrf_trusted_origins | default([]) + [_trusted_origin_1, _trusted_origin_2] }}"
  when:
    - default_settings is defined
    - default_settings.content_origin is defined

- name: Set default CSRF_TRUSTED_ORIGINS if not set by user
  set_fact:
    default_settings: "{{ default_settings | combine({'csrf_trusted_origins': _csrf_trusted_origins}) }}"
  when:
    - default_settings is defined
    - default_settings.content_origin is defined

- name: Combining pulp_settings
  set_fact:
    pulp_combined_settings: "{{ default_settings|combine(raw_pulp_settings, recursive=True) if pulp_settings is defined and pulp_settings is not none else default_settings }}"
    cacheable: yes
  no_log: "{{ no_log }}"

- name: add PULP_AUTH_LDAP_BIND_PASSWORD to pulp settings if ldap_bind_password_secret is defined
  block:
  - name: Check for specified ldap configuration secret
    k8s_info:
      kind: Secret
      namespace: '{{ ansible_operator_meta.namespace }}'
      name: '{{ ldap_bind_password_secret }}'
    register: _ldap_configuration
    no_log: "{{ no_log }}"
    when: ldap_bind_password_secret | length

  - name: Assert that the specified ldap configuration secret exists
    assert:
      that:
        - _ldap_configuration['resources'] | default([]) | length
      fail_msg: "The specified secret '{{ ldap_bind_password_secret }}' does not exist."
    no_log: "{{ no_log }}"
    when: ldap_bind_password_secret | length

  - name: set ldap secret
    set_fact:
      ldap_password:
        PULP_AUTH_LDAP_BIND_PASSWORD:  "{{ _ldap_configuration['resources'][0]['data']['password'] | b64decode }}"
    no_log: "{{ no_log }}"

  - name: add ldap bind password to combined settings
    set_fact:
      pulp_combined_settings: "{{ pulp_combined_settings|combine(ldap_password, recursive=True) }}"
    no_log: "{{ no_log }}"
    when: ldap_bind_password_secret | length
  when: ldap_bind_password_secret is defined

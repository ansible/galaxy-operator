---

# Workaround being unable to do the following, for the subsequent task:
# when: (pulp_settings is not defined) or
#   (pulp_settings.content_origin is not defined)
# (short-circuit evaluation only works for multiple separate when statements)
# https://github.com/ansible/ansible/issues/50554
- name: Setting CONTENT_ORIGIN
  set_fact:
    content_origin_temp: pulp_settings.content_origin
  when:
    - pulp_settings is defined
    - pulp_settings.content_origin is defined

- name: Getting raw pulp_settings
  set_fact:
    raw_pulp_settings: "{{ raw_spec['pulp_settings'] | default({}) }}"
  no_log: "{{ no_log }}"
  when: pulp_settings is defined

- name: Set default token authentication secret name if not set by user
  set_fact:
    container_token_secret: '{{ ansible_operator_meta.name }}-container-auth'
    cacheable: yes
  when: container_token_secret is not defined

- include_tasks:
    file: get_node_ip.yml
  when: content_origin_temp is not defined

- name: Set default CSRF_TRUSTED_ORIGINS to be used if not set by user
  set_fact:
    _trusted_origin_1: "http://{{ default_settings.content_origin.split('://')[1] }}"
    _trusted_origin_2: "https://{{ default_settings.content_origin.split('://')[1] }}"
  when:
    - default_settings is defined
    - default_settings.content_origin is defined

- name: Set CSRF_TRUSTED_ORIGINS list based on content_origin
  set_fact:
    _csrf_trusted_origins: "{{ csrf_trusted_origins | default([]) + [_trusted_origin_1, _trusted_origin_2] }}"
  when:
    - default_settings is defined
    - default_settings.content_origin is defined

- name: Set default CSRF_TRUSTED_ORIGINS if not set by user
  set_fact:
    default_settings: "{{ default_settings | combine({'csrf_trusted_origins': _csrf_trusted_origins}) }}"
  when:
    - default_settings is defined
    - default_settings.content_origin is defined

- name: Combining pulp_settings
  set_fact:
    pulp_combined_settings: "{{ default_settings|combine(raw_pulp_settings, recursive=True) if pulp_settings is defined and pulp_settings is not none else default_settings }}"
    cacheable: yes
  no_log: "{{ no_log }}"

- name: Include redis role
  include_role:
    name: redis
  when: pulp_combined_settings.cache_enabled

- include_tasks:
    file: sso-configuration.yml
  when:
    - sso_secret is defined
    - sso_secret | length

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: "{{ deployment_type|capitalize }}-API-Ready"
        message: "Creating {{ ansible_operator_meta.name }}-server Secret resource"
        reason: CreatingServerSecret
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: pulp-server secret
  k8s:
    state: "{{ deployment_state }}"
    definition: "{{ lookup('template', 'templates/' + item + '.secret.yaml.j2') | from_yaml }}"
  with_items:
    - pulp-server
  no_log: "{{ no_log }}"

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: "{{ deployment_type|capitalize }}-API-Ready"
        message: "Creating {{ ansible_operator_meta.name }}-api-svc Service resource"
        reason: CreatingService
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: pulp-api service
  k8s:
    state: "{{ deployment_state }}"
    definition: "{{ lookup('template', 'templates/' + item + '.service.yaml.j2') | from_yaml }}"
  with_items:
    - pulp-api

- name: Set default pulp-api image
  set_fact:
    _default_image: "{{ _image }}:{{ _image_version }}"

- name: Set user provided pulp-api image
  set_fact:
    _custom_image: "{{ image }}:{{ image_version }}"
  when:
    - image is defined and image != ''
    - image_version is defined and image_version != ''

- name: Set pulp-api image URL
  set_fact:
    _image: "{{ _custom_image | default(lookup('env', 'RELATED_IMAGE_PULP')) | default(_default_image, true) }}"

- name: Set node affinity
  set_fact:
    _node_affinity: "{{ raw_spec['affinity']['node_affinity'] | default({}) }}"
  when: affinity is defined and affinity.node_affinity is defined

- name: Get container token configuration
  k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ container_token_secret }}'
  register: _container_token_configuration
  no_log: "{{ no_log }}"

- include_tasks:
    file: container_auth_configuration.yml
  when:
    - (_container_token_configuration is not defined) or not (_container_token_configuration['resources'] | length)

- name: Get container token keys
  set_fact:
    container_auth_private_key_name: "tls.key"
    container_auth_public_key_name: "tls.crt"
  no_log: "{{ no_log }}"
  when:
    - _container_token_configuration is defined
    - _container_token_configuration['resources'][0]['data']['tls.crt'] is defined
    - _container_token_configuration['resources'][0]['data']['tls.crt'] | length
    - _container_token_configuration['resources'][0]['data']['tls.key'] is defined
    - _container_token_configuration['resources'][0]['data']['tls.key'] | length

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: "{{ deployment_type|capitalize }}-API-Ready"
        message: "Creating {{ ansible_operator_meta.name }}-api Deployment resource"
        reason: CreatingDeployment
        status: "False"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

- name: pulp-api deployment
  k8s:
    state: "{{ deployment_state }}"
    definition: "{{ lookup('template', 'templates/' + item + '.deployment.yaml.j2') | from_yaml }}"
  with_items:
    - pulp-api

- include_tasks:
    file: resource_configuration.yml

- k8s_status:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    conditions:
      - type: "{{ deployment_type|capitalize }}-API-Ready"
        message: All API tasks ran successfully
        reason: ApiTasksFinished
        status: "True"
        lastTransitionTime: "{{ lookup('pipe', 'date --iso-8601=seconds') }}"

# Start signing service
- block:
  - name: Get an API pod to run the commands
    register: __api_pod
    k8s_info:
      kind: Pod
      namespace: "{{ ansible_operator_meta.namespace }}"
      label_selectors:
      - app.kubernetes.io/component=api
      - app.kubernetes.io/managed-by=galaxy-operator
    until:
    - __api_pod.resources[0].status.podIP is defined

  - name: Show API Pod
    ansible.builtin.debug:
      var: __api_pod

  - name: Import galaxy signing service GPG key file
    register: result
    k8s_exec:
      namespace: "{{ ansible_operator_meta.namespace }}"
      pod: "{{ __api_pod.resources[0].metadata.name }}"
      command: sh -c "gpg --batch --import /etc/pulp/keys/signing_service.gpg"
    # Imported successfully: rc 0
    # Already imported: rc 2
    # If you try to import multiple keys but only some need to be imported: rc 2
    changed_when: result.stderr is search("imported:")
    failed_when: result.rc not in [0,2]

  - name: Register signing scripts
    register: result
    k8s_exec:
      namespace: "{{ ansible_operator_meta.namespace }}"
      pod: "{{ __api_pod.resources[0].metadata.name }}"
      command: sh -c "PULP_WORKING_DIRECTORY=/tmp pulpcore-manager add-signing-service {{ item.service_name }} {{ item.service_script }} {{ item.fingerprint }} {{ item.args }}"
    failed_when: result.rc not in [0,1]
    changed_when: result.stdout is search("Successfully added signing service")
    with_items:
    - {service_name: '${COLLECTION_SIGNING_SERVICE}', service_script: "/var/lib/pulp/scripts/collection_sign.sh", fingerprint: '${PULP_SIGNING_KEY_FINGERPRINT}', args: ''}
    - {service_name: '${CONTAINER_SIGNING_SERVICE}', service_script: "/var/lib/pulp/scripts/container_sign.sh", fingerprint: '${PULP_SIGNING_KEY_FINGERPRINT}', args: '--class container:ManifestSigningService'}

  when: signing_secret is defined